If you look at the third box which contains the code for the fabricator you'll see that it consists of a bunch the rules that match one to one with the rules and the grammar the rule name let's pick on the first one SRC is followed by a perimeter list text plus which matches the text plus of the grammar than an equal sign and then a string the limited by an open "and close by" the string builder but that's a string builder for a phrase it can contain literal characters or can contain references to parameters the references the parameters are the little double angle bracket of double angle brackets so in the first in the first rule basically the string that's fabricated is backslash and which is a 
Open brace space on enters space: space and then it refers to the text explain the recursive call will refers to the result of the text parameter how much is an iterator in this case so big the engine does a walk here tree walk for you oh and returns a single stream that single stream gets stuffed in where the angle brackets text is and then is followed by a } followed by another
Followed by the" the interesting part is the show phrase rule again we scored a 123 4/5 fifths rule down and show phrase it takes 245 parameters can you show file name Kia coordinate and K. The names of parameters are arbitrary but I I like to name them to be similar to the grammar rules and I he was a little key to mean a constant string K for constant so the first parameter mask will contain the parsing post out data structure for a "capital show" the second parameter lowercase file name will contain the result of calling file name rule in the fabricator and if you follow that will we drop down to a couple more rules down file name it takes a name as a perimeter and returns of buildup string that contains only the value of the name of that point and figure out what the name is it that point you need to look at the grammar the grammar will call the name rule the name rule takes a letter and a bunch of letters zero or more letters name rest* any fabricator stream with the first letter followed by the rest of the letters and returns that back up and if you keep going down both of the fabricator rules you'll see the name first takes a letter and it returns the letter in a string and the name rest the name rest is a rule that takes one character and returns the character in the name rule the name rest is called zero call it is involves zero or more times that parameter is actually in iterator parameter containing a bunch of name rests or zero numerous depending on what was really there in the original in the info if we go back to show phrase third parameters K art which just matches the double quotes a T double quotes and then the next parameters capital coordinate which is another rule call with returns a number, another number in this case that's all we needed we can do more interesting things then spitting back the numbers with a comma in between them but we didn't need to do that in this case and the final parameter is just a constant Character Dodd and when will that show phrase rule the fabricated rule is called with those five parameters it construct a string that looks like [Double quotes image double cords, double quotes the value of the string return by the file name rule double quotes, the string returned by the coordinate rule of ] And end of spring end of fabricators Street and then if you look at the output of the final output you'll see that it looks like that's what we've done as we've take them a bunch of matches and rearrange them and put characters around them and the resulting string looks like Jason